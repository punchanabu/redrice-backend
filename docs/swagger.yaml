definitions:
  api.ErrorResponse:
    properties:
      error:
        example: Error message
        type: string
    type: object
  api.LoginDetails:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  api.LoginResponse:
    properties:
      message:
        example: Login successful
        type: string
      token:
        example: ""
        type: string
    type: object
  api.RegisterDetails:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: securePassword123
        type: string
      role:
        example: user
        type: string
      telephone:
        example: 123-456-7890
        type: string
    type: object
  api.RegisterResponse:
    properties:
      message:
        example: User registered successfully
        type: string
    type: object
  models.Reservation:
    properties:
      dateTime:
        type: string
      id:
        type: integer
      restaurant:
        $ref: '#/definitions/models.Restaurant'
      restaurantId:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.Restaurant:
    properties:
      address:
        type: string
      closeTime:
        type: string
      description:
        type: string
      facebook:
        type: string
      id:
        type: integer
      imageUrl:
        type: string
      instagram:
        type: string
      name:
        type: string
      openTime:
        type: string
      telephone:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      telephone:
        type: string
    type: object
  v1.ErrorResponse:
    properties:
      error:
        example: Description of the error occurred
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details. Upon successful
        creation, the user can log in with their credentials.
      parameters:
      - description: Register Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.RegisterDetails'
      produces:
      - application/json
      responses:
        "200":
          description: Confirmation of successful registration.
          schema:
            $ref: '#/definitions/api.RegisterResponse'
        "400":
          description: The request was formatted incorrectly or missing required fields.
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error, unable to process the request.
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticates a user by their email and password, returning a JWT
        token for authorized access to protected endpoints if successful.
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/api.LoginDetails'
      produces:
      - application/json
      responses:
        "200":
          description: An object containing a JWT token for authentication and a message
            indicating successful login.
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: The request was formatted incorrectly or missing required fields.
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Authentication failed due to invalid login credentials.
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: The specified user was not found in the system.
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error, unable to process the request.
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User Login
      tags:
      - authentication
  /me:
    get:
      description: Retrieves the details of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: The details of the currently authenticated user.
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get my profile
      tags:
      - user
  /reservations:
    get:
      description: Retrieves a list of all reservations in the system.
      produces:
      - application/json
      responses:
        "200":
          description: An array of reservation objects.
          schema:
            items:
              $ref: '#/definitions/models.Reservation'
            type: array
        "500":
          description: Internal server error while fetching reservations.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get All Reservations
      tags:
      - reservations
    post:
      consumes:
      - application/json
      description: Adds a new reservation to the system with the provided details.
        This endpoint requires authentication.
      parameters:
      - description: Reservation Details
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/models.Reservation'
      produces:
      - application/json
      responses:
        "201":
          description: The created reservation's details, including its unique identifier.
          schema:
            $ref: '#/definitions/models.Reservation'
        "400":
          description: Invalid input format for reservation details.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error while creating the reservation.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a New Reservation
      tags:
      - reservations
  /reservations/{id}:
    delete:
      description: Removes a reservation from the system by its unique identifier.
        This endpoint requires authentication.
      parameters:
      - description: Reservation ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Reservation successfully deleted, no content to return.
        "400":
          description: Invalid reservation ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Reservation not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Delete a Reservation
      tags:
      - reservations
    get:
      description: Retrieves details of a single reservation by its unique identifier.
      parameters:
      - description: Reservation ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The details of the reservation including ID, DateTime, UserID,
            User, RestaurantID, and Restaurant.
          schema:
            $ref: '#/definitions/models.Reservation'
        "400":
          description: Invalid reservation ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Reservation not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a Single Reservation
      tags:
      - reservations
    put:
      consumes:
      - application/json
      description: Updates the details of an existing reservation identified by its
        ID. This endpoint requires authentication.
      parameters:
      - description: Reservation ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Reservation Details
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/models.Reservation'
      produces:
      - application/json
      responses:
        "200":
          description: The updated reservation's details.
          schema:
            $ref: '#/definitions/models.Reservation'
        "400":
          description: Invalid input format for reservation details or invalid reservation
            ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Reservation not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a Reservation
      tags:
      - reservations
  /restaurants:
    get:
      description: Retrieves a list of all restaurants in the system.
      produces:
      - application/json
      responses:
        "200":
          description: An array of restaurant objects.
          schema:
            items:
              $ref: '#/definitions/models.Restaurant'
            type: array
        "500":
          description: Internal server error while fetching restaurants.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get All Restaurants
      tags:
      - restaurants
    post:
      consumes:
      - application/json
      description: Adds a new restaurant to the system with the provided details.
      parameters:
      - description: Restaurant Registration Details
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/models.Restaurant'
      produces:
      - application/json
      responses:
        "201":
          description: The created restaurant's details, including its unique identifier.
          schema:
            $ref: '#/definitions/models.Restaurant'
        "400":
          description: Invalid input format for restaurant details.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error while creating the restaurant.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a New Restaurant
      tags:
      - restaurants
  /restaurants/{id}:
    delete:
      description: Removes a restaurant from the system by its unique identifier.
      parameters:
      - description: Restaurant ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Restaurant successfully deleted, no content to return.
        "400":
          description: Invalid restaurant ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Restaurant not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a Restaurant
      tags:
      - restaurants
    get:
      description: Retrieves details of a single restaurant by its unique identifier.
      parameters:
      - description: Restaurant ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The details of the restaurant including ID, name, location,
            and other relevant information.
          schema:
            $ref: '#/definitions/models.Restaurant'
        "400":
          description: Invalid restaurant ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Restaurant not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a Single Restaurant
      tags:
      - restaurants
    put:
      consumes:
      - application/json
      description: Updates the details of an existing restaurant identified by its
        ID.
      parameters:
      - description: Restaurant ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Restaurant Details
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/models.Restaurant'
      produces:
      - application/json
      responses:
        "200":
          description: The updated restaurant's details.
          schema:
            $ref: '#/definitions/models.Restaurant'
        "400":
          description: Invalid input format for restaurant details or invalid restaurant
            ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Restaurant not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a Restaurant
      tags:
      - restaurants
  /users:
    get:
      description: Retrieves a list of all users in the system.
      produces:
      - application/json
      responses:
        "200":
          description: An array of user objects.
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal server error while fetching users.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get All Users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Adds a new user to the system with the provided details.
      parameters:
      - description: User Registration Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: The created user's details, including their unique identifier.
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input format for user details.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error while creating the user.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a New User
      tags:
      - user
  /users/{id}:
    delete:
      description: Removes a user from the system by their unique identifier.
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User successfully deleted, no content to return.
        "400":
          description: Invalid user ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error while deleting the user.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a User
      tags:
      - user
    get:
      description: Retrieves details of a single user by their unique identifier.
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The details of the user including ID, name, email, telephone,
            and role.
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: User not found with the specified ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a Single User
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates the details of an existing user identified by their ID.
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Updated User Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: The updated user's details.
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input format for user details or invalid user ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal server error while updating the user.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a User
      tags:
      - user
  /users/{userId}/reservations:
    get:
      description: Retrieves a list of reservations associated with a specific user.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: An array of reservation objects for the user.
          schema:
            items:
              $ref: '#/definitions/models.Reservation'
            type: array
        "400":
          description: Invalid user ID format.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Reservations not found for the specified user ID.
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      security:
      - Bearer: []
      summary: Get User's Reservations
      tags:
      - reservations
swagger: "2.0"
